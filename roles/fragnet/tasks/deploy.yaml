---

- name: Pre-flight checks
  assert:
    that:
    - fs_flavour|string in ['depict', 'search', 'ui']

# Paths must be blank or start with a '/'

- name: Assert hostname and path values
  assert:
    that:
    - fs_location[item].hostname|string|length > 0
    - fs_location[item].path|string is match('$|/.*')
  loop:
  - depict
  - search
  - ui
  when: item in fs_location

# Create the namespace and other basic materials
#
# For the deployment to work
# the anticipated infrastructure-deployed PSP is used.

- name: Create namespace
  k8s:
    definition: "{{ lookup('template', 'namespace.yaml.j2') }}"
    wait: yes

- name: Create DockerHub image pull secret
  k8s:
    definition: "{{ lookup('template', 'secret-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_name: dockerhub-pull-secret
    pull_secret: "{{ fs_dockerhub_pullsecret }}"
  when: fs_dockerhub_pullsecret|string|length > 0

- name: Create namespace objects
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
  loop:
  - serviceaccount
  - role
  - rolebinding-fs-sa

- name: Relax {{ fs_namespace }} 'default' service account (for cert-manager)
  k8s:
    definition: "{{ lookup('template', 'rolebinding-default-sa.yaml.j2') }}"
    wait: yes

# Deploy Search, Depict or UI?

- include_tasks: deploy-search.yaml
  when: fs_flavour == 'search'

- include_tasks: deploy-depict.yaml
  when: fs_flavour == 'depict'

- include_tasks: deploy-ui.yaml
  when: fs_flavour == 'ui'

# And now the Kubernetes service and ingress.
# Every deployment has one

- name: Deploy Service
  k8s:
    definition: "{{ lookup('template', 'service.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ fs_pod_ready_timeout }}"

- name: Deploy Ingress
  k8s:
    definition: "{{ lookup('template', 'ingress.yaml.j2') }}"
    wait: yes
