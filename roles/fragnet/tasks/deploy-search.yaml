---

# Extract secrets from the graph namespace
# and then deploy the application.
#
# When deploying 'search' a Graph must exist
# in the namespace {{ graph_namespace }}.

- name: Get graph secrets (from namespace '{{ graph_namespace }}')
  k8s_info:
    kind: Secret
    api_version: v1
    name: graph-secrets
    namespace: "{{ graph_namespace }}"
  register: graph_s_result

- name: Check graph secrets
  assert:
    that: graph_s_result.resources|length == 1

- name: Set neo4j_auth fact from secrets
  set_fact:
    graph_neo4j_auth_fact: "{{ graph_s_result.resources[0].data.neo4j_auth|b64decode }}"

- name: Get neo4j credential facts from neo4j_auth fact
  set_fact:
    graph_user_fact: "{{ graph_neo4j_auth_fact.split('/')[0] }}"
    graph_password_fact: "{{ graph_neo4j_auth_fact.split('/')[1] }}"

- name: Check graph credentials
  assert:
    that:
    - graph_user_fact|length > 0
    - graph_password_fact|length > 0

# OK - we have a graph, deploy the search container...

# Create a DockerHub image pull secret (if defined).

- name: Create DockerHub image pull secret
  k8s:
    definition: "{{ lookup('template', 'secret-imagepull.yaml.j2') }}"
    wait: yes
  vars:
    pull_name: dockerhub-pull-secret
    pull_secret: "{{ fs_dockerhub_pullsecret }}"
  when: fs_dockerhub_pullsecret|string|length > 0

- name: Deploy Fragnet Search objects
  k8s:
    definition: "{{ lookup('template', '{{ item }}.yaml.j2') }}"
    wait: yes
    wait_timeout: "{{ fs_pod_ready_timeout }}"
  loop:
  - configmap-common
  - deployment-search
